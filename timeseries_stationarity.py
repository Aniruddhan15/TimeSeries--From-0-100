# -*- coding: utf-8 -*-
"""TimeSeries -Stationarity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dkqp1YDyU7t-6RiWObFpPzhIMArfT8So
"""

import yfinance as yf

import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

stock_data = yf.download('MSFT',start='2022-01-01')

stock_data.head(10)

plt.figure(figsize=(12,6))
plt.plot(stock_data.index,stock_data['Close'],label='Close Price', color='#FF914D')

plt.title("AAPL Stock price over time")

plt.xlabel('Date')
plt.ylabel('Price in USD')
plt.legend()

plt.grid(True)
plt.show()

"""# Time Series Decomposition"""

from statsmodels.tsa.seasonal import seasonal_decompose

decomposition_additive =  seasonal_decompose(stock_data['Close'],model='additive',period=30)
decomposition_multiplicative = seasonal_decompose(stock_data['Close'],model='multiplicative',period=30)

trend_additive = decomposition_additive.trend
trend_multiplicative = decomposition_multiplicative.trend
seasonal_additive = decomposition_additive.seasonal
seasonal_multiplicative = decomposition_multiplicative.seasonal
residual_additive = decomposition_additive.resid
residual_multiplicative = decomposition_multiplicative.resid

plt.figure(figsize=(14,10))
plt.subplot(411)
plt.plot(stock_data['Close'],label='Original',color='#FF914D')
plt.legend(loc='upper left')
plt.subplot(412)
plt.plot(trend_additive,label='Trend',color='#FF914D')
plt.legend(loc='upper left')
plt.subplot(413)
plt.plot(seasonal_additive,label='Seasonal',color='#FF914D')
plt.legend(loc='upper left')
plt.subplot(414)
plt.plot(residual_additive,label='Residual',color='#FF914D')
plt.legend(loc='upper left')
plt.tight_layout()
plt.show()

"""# STL Decomposition"""

from statsmodels.tsa.seasonal import STL

stl = STL(stock_data['Close'],period=60)
result = stl.fit()

plt.figure(figsize=(14,10))
plt.subplot(411)
plt.plot(result.observed,label='Original',color='#FF914D')
plt.legend(loc='upper left')
plt.subplot(412)
plt.plot(result.trend,label='Trend',color='#FF914D')
plt.legend(loc='upper left')
plt.subplot(413)
plt.plot(result.seasonal,label='Seasonal',color='#FF914D')
plt.legend(loc='upper left')
plt.subplot(414)
plt.plot(result.resid,label='Residual',color='#FF914D')
plt.legend(loc='upper left')
plt.tight_layout()
plt.show()

"""#ADF test: Augmented Dicky-Fuller Test"""

!pip install --upgrade statsmodels

from statsmodels.tsa.stattools import adfuller # The adfuller function has been moved to statsmodels.tsa.stattools

adf_test = adfuller(stock_data['Close'])
print("ADF Test results")
print(f'ADF Statistic: {round(adf_test[0],3)}')
print(f'p-value: {round(adf_test[1],3)}')
print('Critical Values:')

for k,v in adf_test[4].items():
  print(f'   {k}: {round(value,3)}')

"""#KPSS Test"""

from statsmodels.tsa.stattools import kpss

kpss_test = kpss(stock_data['Close'], regression='ct')

#c ---> constant (level stationarity)
#ct --> trend


print("KPSS Test Results: ")
print(f'KPSS Statistic: {round(kpss_test[0],2)}')
print(f'p-value: {round(kpss_test[1])}')
print('Critical Values:')

for k,v in kpss_test[3].items():
  print(f'   {k}: {round(v)}')

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import kstest, ks_2samp

np.random.seed(0)

n = 500

#strictly stationarity series: normally distributed random noise
strict_stationary_series = np.random.normal(0,1,n)

"""#Understanding stationarity"""

print(strict_stationary_series)

#Non-strict stationarity : changing variance
non_strict_stationary_series = np.concatenate([
    np.random.normal(0,1,n//2),
    np.random.normal(1,1,n//2)
])

print(non_strict_stationary_series)

def ks_test_stationarity(series):
  split = len(series) // 2
  series_first_half = series[:split]
  series_second_half = series[split:]
  ks_stat, p_value = ks_2samp(series_first_half,series_second_half)
  return ks_stat, p_value

#Perform the KS Test on strictly stationarity series
ks_stat_strict, ks_pvalue_strict = ks_test_stationarity(strict_stationary_series)

#Perform the KS Test on weak stationarity series
ks_stat_not_strict, ks_pvalue_not_strict = ks_test_stationarity(non_strict_stationary_series)

plt.figure(figsize=(14,8))
plt.plot(strict_stationary_series,label='Strict Stationarity',color='#FF914D')

plt.figure(figsize=(14,8))
plt.plot(non_strict_stationary_series,label='Non-Strict Stationarity',color='#FF914D')

